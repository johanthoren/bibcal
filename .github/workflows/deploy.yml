name: Deployment

on:
  push:
    tags:
      - '*.*.*'

jobs:
  lint:

    runs-on: ubuntu-latest

    steps:
      - uses: DeLaGuardo/setup-clojure@10.1
        with:
          clj-kondo: 'latest'

      - uses: actions/checkout@v3

      - name: clj-kondo
        run: clj-kondo --lint src

      - name: Install lein deps
        run: lein deps

      - name: Lein Kibit
        run: lein kibit

  lein_test:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: lein deps

    - name: Run tests
      run: lein test

  build_jar:
    name: Build JAR

    needs:
      - lint
      - lein_test

    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        target:
          - all.jar

    steps:

      - uses: actions/checkout@v3

      - name: Lein
        run: lein uberjar

      - name: Move and rename JAR
        run: mv target/uberjar/bibcal-*-standalone.jar bibcal-${{ matrix.target }}

      - name: Print the current state of the directory
        run: ls -alh

      - name: Upload JAR
        uses: actions/upload-artifact@v3
        with:
          name: bibcal-${{ matrix.target }}
          path: bibcal-${{ matrix.target }}

  build_linux:
    name: Build Linux

    needs:
      - lint
      - lein_test

    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        target:
          - linux-x86_64

    steps:
      - uses: actions/checkout@v3

      - name: Make
        run: make

      - name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1

      - name: Move and rename binary
        run: mv target/bibcal bibcal-${{ steps.tag.outputs.tag }}-${{ matrix.target }}

      - name: Compress binary
        run: |
          tar cvzf bibcal-${{ steps.tag.outputs.tag }}-${{ matrix.target }}.tar.gz bibcal-${{ steps.tag.outputs.tag }}-${{ matrix.target }}

      - name: Print the current state of the directory
        run: ls -alh

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: bibcal-${{ steps.tag.outputs.tag }}-${{ matrix.target }}.tar.gz
          path: bibcal-${{ steps.tag.outputs.tag }}-${{ matrix.target }}.tar.gz

  build_macos:
    name: Build macOS

    needs:
      - build_jar

    runs-on: macos-latest

    strategy:
      fail-fast: true
      matrix:
        target:
          - apple-darwin-x86_64

    steps:
      - uses: actions/checkout@v3

      - name: Download artifact
        uses: actions/download-artifact@v2.0.5
        with:
          name: bibcal-all.jar

      - uses: graalvm/setup-graalvm@v1
        with:
          version: '22.3.0'
          java-version: '17'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Print the current state of the directory
        run: ls -alh

      - name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1

      - name: Build Native Image
        run: |
          native-image \
          --no-fallback \
          --report-unsupported-elements-at-runtime \
          -H:ReflectionConfigurationFiles=resources/META-INF/native-image/reflect-config.json \
          -H:+ReportExceptionStackTraces \
          --allow-incomplete-classpath \
          -jar bibcal-all.jar \
          -H:Name=bibcal-${{ steps.tag.outputs.tag }}-${{ matrix.target }}

      - name: Print the current state of the directory
        run: ls -alh

      - name: Compress binary
        run: |
          tar cvzf bibcal-${{ steps.tag.outputs.tag }}-${{ matrix.target }}.tar.gz bibcal-${{ steps.tag.outputs.tag }}-${{ matrix.target }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: bibcal-${{ steps.tag.outputs.tag }}-${{ matrix.target }}.tar.gz
          path: bibcal-${{ steps.tag.outputs.tag }}-${{ matrix.target }}.tar.gz

  build_windows:
    name: Build Windows

    needs:
      - build_jar

    strategy:
      fail-fast: true
      matrix:
        target:
          - windows-x86_64

    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3

      - name: Download artifact
        uses: actions/download-artifact@v2.0.5
        with:
          name: bibcal-all.jar

      - name: Add developer command prompt for Microsoft Visual C++
        uses: ilammy/msvc-dev-cmd@v1

      - uses: graalvm/setup-graalvm@v1
        with:
          version: '22.3.0'
          java-version: '17'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Print the current state of the directory
        shell: powershell
        run: dir

      - name: Build Native Image
        shell: cmd
        run: native-image --no-fallback --report-unsupported-elements-at-runtime -H:ReflectionConfigurationFiles=resources/META-INF/native-image/reflect-config.json -H:+ReportExceptionStackTraces --allow-incomplete-classpath -jar bibcal-all.jar -H:Name=bibcal-${{ matrix.target }}

      - name: Print the current state of the directory
        shell: powershell
        run: dir

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: bibcal-${{ matrix.target }}.exe
          path: bibcal-${{ matrix.target }}.exe

  integration_tests:
    name: Run integration tests

    needs:
      - lint
      - lein_test
      - build_linux
      - build_macos
      - build_windows

    runs-on: ${{ matrix.os }}

    env:
      BATS_DIR: "test/xyz/thoren/bats/"
      BATS_EXT_URL: "https://raw.githubusercontent.com/mbland/go-script-bash/master/lib/bats"

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        include:
          - os: ubuntu-latest
            target: linux-x86_64
          - os: macos-latest
            target: apple-darwin-x86_64
          - os: windows-latest
            target: windows-x86_64.exe

    steps:
      - name: Setup BATS (NON-WINDOWS)
        if: "!contains(matrix.target, 'windows')"
        uses: mig4/setup-bats@v1
        with:
          bats-version: 1.4.1

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create directory for bats extensions
        if: "!contains(matrix.target, 'windows')"
        run: mkdir -p "$BATS_DIR"

      - name: Download bats extensions
        if: "!contains(matrix.target, 'windows') && success()"
        run: |
          curl ${BATS_EXT_URL}/assertion-test-helpers -o ${BATS_DIR}/assertion-test-helpers
          curl ${BATS_EXT_URL}/assertions -o ${BATS_DIR}/assertions
          curl ${BATS_EXT_URL}/background-process -o ${BATS_DIR}/background-process
          curl ${BATS_EXT_URL}/helper-function -o ${BATS_DIR}/helper-function
          curl ${BATS_EXT_URL}/helpers -o ${BATS_DIR}/helpers

      - name: Display the contents of the test dir
        if: "!contains(matrix.target, 'windows')"
        run: ls -Ral test

      - name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1

      - name: Download build artifacts (WINDOWS)
        if: "contains(matrix.target, 'windows')"
        uses: actions/download-artifact@v2
        with:
          name: bibcal-${{ matrix.target }}

      - name: Download build artifacts (NON-WINDOWS)
        if: "!contains(matrix.target, 'windows')"
        uses: actions/download-artifact@v2
        with:
          name: bibcal-${{ steps.tag.outputs.tag }}-${{ matrix.target }}.tar.gz

      - name: Extract archive (NON-WINDOWS)
        if: "!contains(matrix.target, 'windows')"
        run: tar xvf bibcal-${{ steps.tag.outputs.tag }}-${{ matrix.target }}.tar.gz

      - name: Rename binary (NON-WINDOWS)
        if: "!contains(matrix.target, 'windows')"
        run: mv bibcal-${{ steps.tag.outputs.tag }}-${{ matrix.target }} bibcal

      - name: Rename binary (WINDOWS)
        if: "contains(matrix.target, 'windows')"
        run: mv bibcal-${{ matrix.target }} bibcal.exe

      - name: Make binary executable (NON-WINDOWS)
        if: "!contains(matrix.target, 'windows')"
        run: chmod +x bibcal

      - name: List directory (NON-WINDOWS)
        if: "!contains(matrix.target, 'windows')"
        run: ls -alh

      - name: List directory (WINDOWS)
        if: "contains(matrix.target, 'windows')"
        run: dir

      - name: Run tests (NON-WINDOWS)
        if: "!contains(matrix.target, 'windows')"
        shell: bash
        run: bats -r .

      - name: Run the executable with -h (WINDOWS)
        if: "contains(matrix.target, 'windows')"
        shell: bash
        run: ./bibcal.exe -h

      - name: Run the executable with 2021 (WINDOWS)
        if: "contains(matrix.target, 'windows')"
        shell: bash
        run: ./bibcal.exe 2021

      - name: Run the executable with 2051 (WINDOWS)
        if: "contains(matrix.target, 'windows')"
        shell: bash
        run: ./bibcal.exe 2021

      - name: Run the executable with -L, -l, -z, and args (WINDOWS)
        if: "contains(matrix.target, 'windows')"
        shell: bash
        run: ./bibcal -L -74.006111 -l 40.712778 -z America/New_York 2021 9 11 9 0

        # The command below saves a configuration file, which is needed
        # for the later commands to work.
      - name: Run the executable with -c, -L, -l, and -z (WINDOWS)
        if: "contains(matrix.target, 'windows')"
        shell: bash
        run: ./bibcal.exe -c -L 35.233804 -l 31.7781161 -z Asia/Jerusalem

      - name: Run the executable without any options (WINDOWS)
        if: "contains(matrix.target, 'windows')"
        shell: bash
        run: ./bibcal.exe

      - name: Run the executable with option -t (WINDOWS)
        if: "contains(matrix.target, 'windows')"
        shell: bash
        run: ./bibcal.exe -t

      - name: Run the executable with option -T (WINDOWS)
        if: "contains(matrix.target, 'windows')"
        shell: bash
        run: ./bibcal.exe -T

      - name: Run the executable with option -T and -y (WINDOWS)
        if: "contains(matrix.target, 'windows')"
        shell: bash
        run: ./bibcal.exe -T -y

      - name: Run the executable with option -T and -Y (WINDOWS)
        if: "contains(matrix.target, 'windows')"
        shell: bash
        run: ./bibcal.exe -T -Y

      - name: Run the executable with -vv (WINDOWS)
        if: "contains(matrix.target, 'windows')"
        shell: bash
        run: ./bibcal.exe -vv

  create_release:
    name: Create Release

    needs:
      - lint
      - lein_test
      - build_jar
      - build_linux
      - build_macos
      - build_windows
      - integration_tests

    runs-on: ubuntu-latest

    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_tag: ${{ steps.tag.outputs.tag }}

    steps:
      - uses: actions/checkout@v3

      - name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.1.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          release_name: Release ${{github.ref}}
          draft: false
          prerelease: false

  package_deb:
    name: Package DEB package

    needs:
      - create_release

    runs-on: ubuntu-latest

    outputs:
      package_name: ${{ steps.build_deb.outputs.package }}

    strategy:
      fail-fast: true
      matrix:
        target:
          - linux-x86_64

    steps:
      - uses: actions/checkout@v3

      - name: Download artifact
        uses: actions/download-artifact@v2.0.5
        with:
          name: bibcal-${{ needs.create_release.outputs.release_tag }}-${{ matrix.target }}.tar.gz

      - name: Extract archive
        run: |
          tar xvf bibcal-${{ needs.create_release.outputs.release_tag }}-${{ matrix.target }}.tar.gz

      - name: Rename binary
        run: |
          mv bibcal-${{ needs.create_release.outputs.release_tag }}-${{ matrix.target }} bibcal-${{ matrix.target }}

      - name: Build DEB Package
        id: build_deb
        uses: kentik/pkg@v1.0.0-rc7
        with:
          name: bibcal
          version: ${{ needs.create_release.outputs.release_tag }}
          arch: x86_64
          format: deb
          package: package.yml

      - name: Print the current state of the directory
        run: ls -alh

      - name: Upload DEB artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.build_deb.outputs.package }}
          path: ${{ steps.build_deb.outputs.package }}

  package_rpm:
    name: Package RPM package

    needs:
      - create_release

    runs-on: ubuntu-latest

    outputs:
      package_name: ${{ steps.build_rpm.outputs.package }}

    strategy:
      fail-fast: true
      matrix:
        target:
          - linux-x86_64

    steps:
      - uses: actions/checkout@v3

      - name: Download artifact
        uses: actions/download-artifact@v2.0.5
        with:
          name: bibcal-${{ needs.create_release.outputs.release_tag }}-${{ matrix.target }}.tar.gz

      - name: Extract archive
        run: |
          tar xvf bibcal-${{ needs.create_release.outputs.release_tag }}-${{ matrix.target }}.tar.gz

      - name: Rename binary
        run: |
          mv bibcal-${{ needs.create_release.outputs.release_tag }}-${{ matrix.target }} bibcal-${{ matrix.target }}

      - name: Build RPM Package
        id: build_rpm
        uses: kentik/pkg@v1.0.0-rc7
        with:
          name: bibcal
          version: ${{ needs.create_release.outputs.release_tag }}
          arch: x86_64
          format: rpm
          package: package.yml

      - name: Print the current state of the directory
        run: ls -alh

      - name: Upload RPM artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.build_rpm.outputs.package }}
          path: ${{ steps.build_rpm.outputs.package }}

  sign_release_assets:
    name: Sign Release Assets

    needs:
      - create_release
      - package_deb
      - package_rpm

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v2

      - name: Display structure of downloaded files
        run: ls -Ralh

      - name: Make tmp directory
        run: mkdir -p tmp

      - name: Move all artifacts to tmp directory
        run: find ./bibcal* -mindepth 1 -name 'bibcal*' -type f -exec mv {} tmp/ \;

      - name: Remove empty directories
        run: rmdir bibcal*

      - name: Move all artifacts to the current directory
        run: mv tmp/* .

      - name: Remove empty tmp directory
        run: rmdir tmp

      - name: Display current directory
        run: ls -alh

      - name: Sign artifacts
        uses: tristan-weil/ghaction-checksum-sign-artifact@v1.0.1
        with:
          checksum_output: 'one_file_per_digest'
          sign_output: 'checksum_detach'
          path: 'bibcal*'
          sign_key: '${{ secrets.SIGN_KEY }}'
          sign_key_passphrase: '${{ secrets.SIGN_KEY_PASSPHRASE }}'
          sign_key_fingerprint: '${{ secrets.SIGN_KEY_FINGERPRINT }}'
          sign_keyserver: '${{ secrets.SIGN_KEY_KEYSERVER }}'

      - name: Print the current state of the directory
        run: ls -Ralh

      - name: Upload checksum artifact
        uses: actions/upload-artifact@v3
        with:
          name: SHA256SUMS
          path: SHA256SUMS

      - name: Upload signature artifact
        uses: actions/upload-artifact@v3
        with:
          name: SHA256SUMS.asc
          path: SHA256SUMS.asc

  upload_release_assets:
    name: Upload Release Assets

    needs:
      - create_release
      - package_deb
      - package_rpm
      - sign_release_assets

    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        target:
          - all.jar
          - linux-x86_64
          - apple-darwin-x86_64
          - windows-x86_64

    steps:
      - uses: actions/checkout@v3

      - name: Download checksum artifact
        if: contains(matrix.target, 'linux')
        uses: actions/download-artifact@v2.0.5
        with:
          name: SHA256SUMS

      - name: Download signature artifact
        if: contains(matrix.target, 'linux')
        uses: actions/download-artifact@v2.0.5
        with:
          name: SHA256SUMS.asc

      - name: Download artifact (DEB)
        if: contains(matrix.target, 'linux')
        uses: actions/download-artifact@v2.0.5
        with:
          name: ${{ needs.package_deb.outputs.package_name }}

      - name: Download artifact (RPM)
        if: contains(matrix.target, 'linux')
        uses: actions/download-artifact@v2.0.5
        with:
          name: ${{ needs.package_rpm.outputs.package_name }}

      - name: Download artifact (JAR)
        if: contains(matrix.target, 'all')
        uses: actions/download-artifact@v2.0.5
        with:
          name: bibcal-${{ matrix.target }}

      - name: Download artifact (UNIX)
        if: "!contains(matrix.target, 'all') && !contains(matrix.target, 'windows')"
        uses: actions/download-artifact@v2.0.5
        with:
          name: bibcal-${{ needs.create_release.outputs.release_tag }}-${{ matrix.target }}.tar.gz

      - name: Download artifact (WINDOWS)
        if: contains(matrix.target, 'windows')
        uses: actions/download-artifact@v2.0.5
        with:
          name: bibcal-${{ matrix.target }}.exe

      - name: Print the current state of the directory
        run: ls -Ralh

      - name: Release DEB
        if: contains(matrix.target, 'linux')
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./${{ needs.package_deb.outputs.package_name }}
          asset_name: ${{ needs.package_deb.outputs.package_name }}
          asset_content_type: application/x-deb

      - name: Release RPM
        if: contains(matrix.target, 'linux')
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./${{ needs.package_rpm.outputs.package_name }}
          asset_name: ${{ needs.package_rpm.outputs.package_name }}
          asset_content_type: application/x-rpm

      - name: Release executable (JAR)
        if: contains(matrix.target, 'all')
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./bibcal-${{ matrix.target }}
          asset_name: bibcal-${{ matrix.target }}
          asset_content_type: application/java-archive

      - name: Release executable (UNIX)
        if: "!contains(matrix.target, 'all') && !contains(matrix.target, 'windows')"
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./bibcal-${{ needs.create_release.outputs.release_tag }}-${{ matrix.target }}.tar.gz
          asset_name: bibcal-${{ needs.create_release.outputs.release_tag }}-${{ matrix.target }}.tar.gz
          asset_content_type: application/gzip

      - name: Release executable (WINDOWS)
        if: contains(matrix.target, 'windows')
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./bibcal-${{ matrix.target }}.exe
          asset_name: bibcal-${{ matrix.target }}.exe
          asset_content_type: application/octet-stream

      - name: Release checksum (LINUX)
        if: contains(matrix.target, 'linux')
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./SHA256SUMS
          asset_name: SHA256SUMS
          asset_content_type: text/plain

      - name: Release signature (LINUX)
        if: contains(matrix.target, 'linux')
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./SHA256SUMS.asc
          asset_name: SHA256SUMS.asc
          asset_content_type: text/plain

  publish_aur_package:
    name: Publish AUR package

    needs:
      - lint
      - lein_test
      - build_linux
      - integration_tests
      - create_release
      - sign_release_assets
      - upload_release_assets

    # if: needs.create_release.outputs.release_type == 'official'

    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        target:
          - linux-x86_64

    steps:
      - uses: actions/checkout@v3

      - name: Download checksum
        uses: actions/download-artifact@v2.0.5
        with:
          name: SHA256SUMS

      - name: Download signature
        uses: actions/download-artifact@v2.0.5
        with:
          name: SHA256SUMS.asc

      - name: Print the current state of the directory
        run: ls -alh

      - name: Copy PKGBUILD template
        run: cp template/PKGBUILD .

      - name: Insert pkgver into PKGBUILD
        run: |
          sed -i \
          "s/RELEASE_TAG/${{ needs.create_release.outputs.release_tag }}/g" \
          PKGBUILD

      - name: Insert executable checksum into PKGBUILD
        run: |
          sed -i \
          "s/BINARY_CHECKSUM/$(awk '/linux-x86_64.tar.gz/ {print $1}' SHA256SUMS)/g" \
          PKGBUILD

      - name: Insert checksum of checksum into PKGBUILD
        run: |
          sed -i \
          "s/CHECKSUM_CHECKSUM/$(sha256sum SHA256SUMS | \
          awk '{print $1}')/g" PKGBUILD

      - name: Insert LICENSE checksum into PKGBUILD
        run: |
          sed -i \
          "s/LICENSE_CHECKSUM/$(sha256sum LICENSE | awk '{print $1}')/g" \
          PKGBUILD

      - name: Insert README checksum into PKGBUILD
        run: |
          sed -i \
          "s/README_CHECKSUM/$(sha256sum README.md | awk '{print $1}')/g" \
          PKGBUILD

      - name: Print resulting PKGBUILD
        run: cat ./PKGBUILD

      - name: Publish bibcal-bin to the AUR
        uses: KSXGitHub/github-actions-deploy-aur@v2.2.5
        with:
          pkgname: bibcal-bin
          pkgbuild: ./PKGBUILD
          commit_username: ${{ secrets.AUR_USERNAME }}
          commit_email: ${{ secrets.AUR_EMAIL }}
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          commit_message: ${{ needs.create_release.outputs.release_tag }}
